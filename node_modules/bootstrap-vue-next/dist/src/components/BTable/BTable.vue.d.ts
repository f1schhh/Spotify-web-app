import type { Booleanish, BTableProvider, BTableSortCompare, LiteralUnion, Numberish, TableField, TableFieldRaw, TableItem } from '../../types';
declare const _default: <T = Record<string, unknown>>(__VLS_props: {
    filter?: string | undefined;
    id?: string | undefined;
    caption?: string | undefined;
    small?: Booleanish | undefined;
    align?: import("../../types").VerticalAlign | undefined;
    variant?: keyof import("../../types").BaseColorVariant | null | undefined;
    fixed?: Booleanish | undefined;
    dark?: Booleanish | undefined;
    modelValue?: any;
    busy?: Booleanish | undefined;
    items?: readonly TableItem<T>[] | undefined;
    borderVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
    captionHtml?: string | undefined;
    stacked?: Booleanish | import("../../types").Breakpoint | undefined;
    perPage?: Numberish | undefined;
    bordered?: Booleanish | undefined;
    borderless?: Booleanish | undefined;
    captionTop?: Booleanish | undefined;
    hover?: Booleanish | undefined;
    noBorderCollapse?: Booleanish | undefined;
    outlined?: Booleanish | undefined;
    responsive?: Booleanish | import("../../types").Breakpoint | undefined;
    stickyHeader?: Booleanish | undefined;
    striped?: Booleanish | undefined;
    stripedColumns?: Booleanish | undefined;
    "onHead-clicked"?: ((key: LiteralUnion<keyof T>, field: TableFieldRaw<T>, event: MouseEvent, isFooter: boolean) => any) | undefined;
    "onRow-clicked"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
    "onRow-dbl-clicked"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
    "onRow-hovered"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
    "onRow-unhovered"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
    detailsTdClass?: any;
    emptyFilteredText?: string | undefined;
    emptyText?: string | undefined;
    fieldColumnClass?: string | readonly any[] | Readonly<Record<PropertyKey, any>> | ((field: TableField<T>) => readonly Record<string, any>[]) | undefined;
    fields?: TableFieldRaw<T>[] | undefined;
    footClone?: Booleanish | undefined;
    footRowVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
    footVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
    headRowVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
    headVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
    labelStacked?: Booleanish | undefined;
    primaryKey?: string | undefined;
    showEmpty?: Booleanish | undefined;
    tbodyClass?: any;
    tbodyTrAttr?: any;
    tbodyTrClass?: string | readonly any[] | Readonly<Record<PropertyKey, any>> | ((item: TableItem | null, type: string) => string | readonly any[] | null | undefined) | undefined;
    tfootClass?: any;
    tfootTrClass?: any;
    theadClass?: any;
    theadTrClass?: any;
    onFiltered?: ((value: TableItem<T>[]) => any) | undefined;
    "onRow-selected"?: ((value: TableItem<T>) => any) | undefined;
    "onRow-unselected"?: ((value: TableItem<T>) => any) | undefined;
    onSelection?: ((value: TableItem<T>[]) => any) | undefined;
    onSorted?: ((sortBy: string, isDesc: boolean) => any) | undefined;
    "onUpdate:busy"?: ((value: boolean) => any) | undefined;
    "onUpdate:selectedItems"?: ((value: TableItem<T>[]) => any) | undefined;
    "onUpdate:sortDesc"?: ((value: boolean) => any) | undefined;
    "onUpdate:sortBy"?: ((value: string) => any) | undefined;
    provider?: BTableProvider<T> | undefined;
    sortCompare?: BTableSortCompare<T> | undefined;
    noProvider?: readonly ("paging" | "sorting" | "filtering")[] | undefined;
    noProviderPaging?: Booleanish | undefined;
    noProviderSorting?: Booleanish | undefined;
    noProviderFiltering?: Booleanish | undefined;
    sortBy?: string | undefined;
    sortDesc?: Booleanish | undefined;
    selectable?: Booleanish | undefined;
    stickySelect?: Booleanish | undefined;
    selectHead?: string | boolean | undefined;
    selectMode?: "range" | "single" | "multi" | undefined;
    selectionVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
    busyLoadingText?: string | undefined;
    currentPage?: Numberish | undefined;
    filterable?: readonly string[] | undefined;
    noSelectOnClick?: Booleanish | undefined;
    sortCompareLocale?: string | string[] | undefined;
    sortCompareOptions?: Intl.CollatorOptions | undefined;
    selectedItems?: readonly TableItem<T>[] | undefined;
    noSortableIcon?: Booleanish | undefined;
} & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, __VLS_ctx?: {
    slots: Partial<Record<NonNullable<string | number>, (_: {
        value: unknown;
        index: number;
        item: TableItem<T>;
        field: TableField<T>;
        items: readonly TableItem<T>[];
        toggleDetails: () => void;
        detailsShowing: boolean;
    }) => any>> & {
        sortAsc?(_: {
            value: unknown;
            index: number;
            item: TableItem<T>;
            field: TableField<T>;
            items: readonly TableItem<T>[];
            toggleDetails: () => void;
            detailsShowing: boolean;
        }): any;
        sortDesc?(_: {
            value: unknown;
            index: number;
            item: TableItem<T>;
            field: TableField<T>;
            items: readonly TableItem<T>[];
            toggleDetails: () => void;
            detailsShowing: boolean;
        }): any;
        "table-busy"?(_: {}): any;
    };
    attrs: any;
    emit: ((evt: "head-clicked", key: LiteralUnion<keyof T>, field: TableFieldRaw<T>, event: MouseEvent, isFooter: boolean) => void) & ((evt: "row-clicked", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-dbl-clicked", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-hovered", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-unhovered", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "filtered", value: TableItem<T>[]) => void) & ((evt: "row-selected", value: TableItem<T>) => void) & ((evt: "row-unselected", value: TableItem<T>) => void) & ((evt: "selection", value: TableItem<T>[]) => void) & ((evt: "sorted", sortBy: string, isDesc: boolean) => void) & ((evt: "update:busy", value: boolean) => void) & ((evt: "update:selectedItems", value: TableItem<T>[]) => void) & ((evt: "update:sortDesc", value: boolean) => void) & ((evt: "update:sortBy", value: string) => void);
} | undefined, __VLS_expose?: ((exposed: import("vue").ShallowUnwrapRef<{
    clearSelected: () => void;
    refresh: () => Promise<void>;
    selectAllRows: () => void;
    selectRow: (index: number) => void;
    unselectRow: (index: number) => void;
}>) => void) | undefined, __VLS_setup?: Promise<{
    props: {
        filter?: string | undefined;
        id?: string | undefined;
        caption?: string | undefined;
        small?: Booleanish | undefined;
        align?: import("../../types").VerticalAlign | undefined;
        variant?: keyof import("../../types").BaseColorVariant | null | undefined;
        fixed?: Booleanish | undefined;
        dark?: Booleanish | undefined;
        modelValue?: any;
        busy?: Booleanish | undefined;
        items?: readonly TableItem<T>[] | undefined;
        borderVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
        captionHtml?: string | undefined;
        stacked?: Booleanish | import("../../types").Breakpoint | undefined;
        perPage?: Numberish | undefined;
        bordered?: Booleanish | undefined;
        borderless?: Booleanish | undefined;
        captionTop?: Booleanish | undefined;
        hover?: Booleanish | undefined;
        noBorderCollapse?: Booleanish | undefined;
        outlined?: Booleanish | undefined;
        responsive?: Booleanish | import("../../types").Breakpoint | undefined;
        stickyHeader?: Booleanish | undefined;
        striped?: Booleanish | undefined;
        stripedColumns?: Booleanish | undefined;
        "onHead-clicked"?: ((key: LiteralUnion<keyof T>, field: TableFieldRaw<T>, event: MouseEvent, isFooter: boolean) => any) | undefined;
        "onRow-clicked"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
        "onRow-dbl-clicked"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
        "onRow-hovered"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
        "onRow-unhovered"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
        detailsTdClass?: any;
        emptyFilteredText?: string | undefined;
        emptyText?: string | undefined;
        fieldColumnClass?: string | readonly any[] | Readonly<Record<PropertyKey, any>> | ((field: TableField<T>) => readonly Record<string, any>[]) | undefined;
        fields?: TableFieldRaw<T>[] | undefined;
        footClone?: Booleanish | undefined;
        footRowVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
        footVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
        headRowVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
        headVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
        labelStacked?: Booleanish | undefined;
        primaryKey?: string | undefined;
        showEmpty?: Booleanish | undefined;
        tbodyClass?: any;
        tbodyTrAttr?: any;
        tbodyTrClass?: string | readonly any[] | Readonly<Record<PropertyKey, any>> | ((item: TableItem | null, type: string) => string | readonly any[] | null | undefined) | undefined;
        tfootClass?: any;
        tfootTrClass?: any;
        theadClass?: any;
        theadTrClass?: any;
        onFiltered?: ((value: TableItem<T>[]) => any) | undefined;
        "onRow-selected"?: ((value: TableItem<T>) => any) | undefined;
        "onRow-unselected"?: ((value: TableItem<T>) => any) | undefined;
        onSelection?: ((value: TableItem<T>[]) => any) | undefined;
        onSorted?: ((sortBy: string, isDesc: boolean) => any) | undefined;
        "onUpdate:busy"?: ((value: boolean) => any) | undefined;
        "onUpdate:selectedItems"?: ((value: TableItem<T>[]) => any) | undefined;
        "onUpdate:sortDesc"?: ((value: boolean) => any) | undefined;
        "onUpdate:sortBy"?: ((value: string) => any) | undefined;
        provider?: BTableProvider<T> | undefined;
        sortCompare?: BTableSortCompare<T> | undefined;
        noProvider?: readonly ("paging" | "sorting" | "filtering")[] | undefined;
        noProviderPaging?: Booleanish | undefined;
        noProviderSorting?: Booleanish | undefined;
        noProviderFiltering?: Booleanish | undefined;
        sortBy?: string | undefined;
        sortDesc?: Booleanish | undefined;
        selectable?: Booleanish | undefined;
        stickySelect?: Booleanish | undefined;
        selectHead?: string | boolean | undefined;
        selectMode?: "range" | "single" | "multi" | undefined;
        selectionVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
        busyLoadingText?: string | undefined;
        currentPage?: Numberish | undefined;
        filterable?: readonly string[] | undefined;
        noSelectOnClick?: Booleanish | undefined;
        sortCompareLocale?: string | string[] | undefined;
        sortCompareOptions?: Intl.CollatorOptions | undefined;
        selectedItems?: readonly TableItem<T>[] | undefined;
        noSortableIcon?: Booleanish | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{
        clearSelected: () => void;
        refresh: () => Promise<void>;
        selectAllRows: () => void;
        selectRow: (index: number) => void;
        unselectRow: (index: number) => void;
    }>): void;
    attrs: any;
    slots: Partial<Record<NonNullable<string | number>, (_: {
        value: unknown;
        index: number;
        item: TableItem<T>;
        field: TableField<T>;
        items: readonly TableItem<T>[];
        toggleDetails: () => void;
        detailsShowing: boolean;
    }) => any>> & {
        sortAsc?(_: {
            value: unknown;
            index: number;
            item: TableItem<T>;
            field: TableField<T>;
            items: readonly TableItem<T>[];
            toggleDetails: () => void;
            detailsShowing: boolean;
        }): any;
        sortDesc?(_: {
            value: unknown;
            index: number;
            item: TableItem<T>;
            field: TableField<T>;
            items: readonly TableItem<T>[];
            toggleDetails: () => void;
            detailsShowing: boolean;
        }): any;
        "table-busy"?(_: {}): any;
    };
    emit: ((evt: "head-clicked", key: LiteralUnion<keyof T>, field: TableFieldRaw<T>, event: MouseEvent, isFooter: boolean) => void) & ((evt: "row-clicked", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-dbl-clicked", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-hovered", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-unhovered", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "filtered", value: TableItem<T>[]) => void) & ((evt: "row-selected", value: TableItem<T>) => void) & ((evt: "row-unselected", value: TableItem<T>) => void) & ((evt: "selection", value: TableItem<T>[]) => void) & ((evt: "sorted", sortBy: string, isDesc: boolean) => void) & ((evt: "update:busy", value: boolean) => void) & ((evt: "update:selectedItems", value: TableItem<T>[]) => void) & ((evt: "update:sortDesc", value: boolean) => void) & ((evt: "update:sortBy", value: string) => void);
}>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: {
        props: {
            filter?: string | undefined;
            id?: string | undefined;
            caption?: string | undefined;
            small?: Booleanish | undefined;
            align?: import("../../types").VerticalAlign | undefined;
            variant?: keyof import("../../types").BaseColorVariant | null | undefined;
            fixed?: Booleanish | undefined;
            dark?: Booleanish | undefined;
            modelValue?: any;
            busy?: Booleanish | undefined;
            items?: readonly TableItem<T>[] | undefined;
            borderVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
            captionHtml?: string | undefined;
            stacked?: Booleanish | import("../../types").Breakpoint | undefined;
            perPage?: Numberish | undefined;
            bordered?: Booleanish | undefined;
            borderless?: Booleanish | undefined;
            captionTop?: Booleanish | undefined;
            hover?: Booleanish | undefined;
            noBorderCollapse?: Booleanish | undefined;
            outlined?: Booleanish | undefined;
            responsive?: Booleanish | import("../../types").Breakpoint | undefined;
            stickyHeader?: Booleanish | undefined;
            striped?: Booleanish | undefined;
            stripedColumns?: Booleanish | undefined;
            "onHead-clicked"?: ((key: LiteralUnion<keyof T>, field: TableFieldRaw<T>, event: MouseEvent, isFooter: boolean) => any) | undefined;
            "onRow-clicked"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
            "onRow-dbl-clicked"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
            "onRow-hovered"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
            "onRow-unhovered"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
            detailsTdClass?: any;
            emptyFilteredText?: string | undefined;
            emptyText?: string | undefined;
            fieldColumnClass?: string | readonly any[] | Readonly<Record<PropertyKey, any>> | ((field: TableField<T>) => readonly Record<string, any>[]) | undefined;
            fields?: TableFieldRaw<T>[] | undefined;
            footClone?: Booleanish | undefined;
            footRowVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
            footVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
            headRowVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
            headVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
            labelStacked?: Booleanish | undefined;
            primaryKey?: string | undefined;
            showEmpty?: Booleanish | undefined;
            tbodyClass?: any;
            tbodyTrAttr?: any;
            tbodyTrClass?: string | readonly any[] | Readonly<Record<PropertyKey, any>> | ((item: TableItem | null, type: string) => string | readonly any[] | null | undefined) | undefined;
            tfootClass?: any;
            tfootTrClass?: any;
            theadClass?: any;
            theadTrClass?: any;
            onFiltered?: ((value: TableItem<T>[]) => any) | undefined;
            "onRow-selected"?: ((value: TableItem<T>) => any) | undefined;
            "onRow-unselected"?: ((value: TableItem<T>) => any) | undefined;
            onSelection?: ((value: TableItem<T>[]) => any) | undefined;
            onSorted?: ((sortBy: string, isDesc: boolean) => any) | undefined;
            "onUpdate:busy"?: ((value: boolean) => any) | undefined;
            "onUpdate:selectedItems"?: ((value: TableItem<T>[]) => any) | undefined;
            "onUpdate:sortDesc"?: ((value: boolean) => any) | undefined;
            "onUpdate:sortBy"?: ((value: string) => any) | undefined;
            provider?: BTableProvider<T> | undefined;
            sortCompare?: BTableSortCompare<T> | undefined;
            noProvider?: readonly ("paging" | "sorting" | "filtering")[] | undefined;
            noProviderPaging?: Booleanish | undefined;
            noProviderSorting?: Booleanish | undefined;
            noProviderFiltering?: Booleanish | undefined;
            sortBy?: string | undefined;
            sortDesc?: Booleanish | undefined;
            selectable?: Booleanish | undefined;
            stickySelect?: Booleanish | undefined;
            selectHead?: string | boolean | undefined;
            selectMode?: "range" | "single" | "multi" | undefined;
            selectionVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
            busyLoadingText?: string | undefined;
            currentPage?: Numberish | undefined;
            filterable?: readonly string[] | undefined;
            noSelectOnClick?: Booleanish | undefined;
            sortCompareLocale?: string | string[] | undefined;
            sortCompareOptions?: Intl.CollatorOptions | undefined;
            selectedItems?: readonly TableItem<T>[] | undefined;
            noSortableIcon?: Booleanish | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
        expose(exposed: import("vue").ShallowUnwrapRef<{
            clearSelected: () => void;
            refresh: () => Promise<void>;
            selectAllRows: () => void;
            selectRow: (index: number) => void;
            unselectRow: (index: number) => void;
        }>): void;
        attrs: any;
        slots: Partial<Record<NonNullable<string | number>, (_: {
            value: unknown;
            index: number;
            item: TableItem<T>;
            field: TableField<T>;
            items: readonly TableItem<T>[];
            toggleDetails: () => void;
            detailsShowing: boolean;
        }) => any>> & {
            sortAsc?(_: {
                value: unknown;
                index: number;
                item: TableItem<T>;
                field: TableField<T>;
                items: readonly TableItem<T>[];
                toggleDetails: () => void;
                detailsShowing: boolean;
            }): any;
            sortDesc?(_: {
                value: unknown;
                index: number;
                item: TableItem<T>;
                field: TableField<T>;
                items: readonly TableItem<T>[];
                toggleDetails: () => void;
                detailsShowing: boolean;
            }): any;
            "table-busy"?(_: {}): any;
        };
        emit: ((evt: "head-clicked", key: LiteralUnion<keyof T>, field: TableFieldRaw<T>, event: MouseEvent, isFooter: boolean) => void) & ((evt: "row-clicked", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-dbl-clicked", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-hovered", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-unhovered", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "filtered", value: TableItem<T>[]) => void) & ((evt: "row-selected", value: TableItem<T>) => void) & ((evt: "row-unselected", value: TableItem<T>) => void) & ((evt: "selection", value: TableItem<T>[]) => void) & ((evt: "sorted", sortBy: string, isDesc: boolean) => void) & ((evt: "update:busy", value: boolean) => void) & ((evt: "update:selectedItems", value: TableItem<T>[]) => void) & ((evt: "update:sortDesc", value: boolean) => void) & ((evt: "update:sortBy", value: string) => void);
    } | undefined;
};
export default _default;
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
