import type { AriaInvalid, Booleanish, Numberish, SelectOptionRaw } from '../../types';
declare const _default: <T = unknown>(__VLS_props: {
    name?: string | undefined;
    id?: string | undefined;
    ariaInvalid?: AriaInvalid | undefined;
    autofocus?: Booleanish | undefined;
    disabled?: Booleanish | undefined;
    form?: string | undefined;
    multiple?: Booleanish | undefined;
    required?: Booleanish | undefined;
    size?: keyof import("../../types").BaseSize | undefined;
    plain?: Booleanish | undefined;
    state?: Booleanish | null | undefined;
    modelValue?: string | number | boolean | readonly unknown[] | Readonly<Record<string, unknown>> | null | undefined;
    options?: readonly (SelectOptionRaw | Readonly<{
        label: string;
        options: readonly SelectOptionRaw<unknown>[];
    }>)[] | undefined;
    "onUpdate:modelValue"?: ((value: unknown) => any) | undefined;
    selectSize?: Numberish | undefined;
} & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, __VLS_ctx?: {
    slots: Readonly<{
        default?: ((props: Record<string, never>) => any) | undefined;
        first?: ((props: Record<string, never>) => any) | undefined;
    }> & {
        default?: ((props: Record<string, never>) => any) | undefined;
        first?: ((props: Record<string, never>) => any) | undefined;
    };
    attrs: any;
    emit: (evt: "update:modelValue", value: unknown) => void;
} | undefined, __VLS_expose?: ((exposed: import("vue").ShallowUnwrapRef<{
    blur: () => void;
    element: import("vue").Ref<HTMLElement | null>;
    focus: () => void;
}>) => void) | undefined, __VLS_setup?: Promise<{
    props: {
        name?: string | undefined;
        id?: string | undefined;
        ariaInvalid?: AriaInvalid | undefined;
        autofocus?: Booleanish | undefined;
        disabled?: Booleanish | undefined;
        form?: string | undefined;
        multiple?: Booleanish | undefined;
        required?: Booleanish | undefined;
        size?: keyof import("../../types").BaseSize | undefined;
        plain?: Booleanish | undefined;
        state?: Booleanish | null | undefined;
        modelValue?: string | number | boolean | readonly unknown[] | Readonly<Record<string, unknown>> | null | undefined;
        options?: readonly (SelectOptionRaw | Readonly<{
            label: string;
            options: readonly SelectOptionRaw<unknown>[];
        }>)[] | undefined;
        "onUpdate:modelValue"?: ((value: unknown) => any) | undefined;
        selectSize?: Numberish | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{
        blur: () => void;
        element: import("vue").Ref<HTMLElement | null>;
        focus: () => void;
    }>): void;
    attrs: any;
    slots: Readonly<{
        default?: ((props: Record<string, never>) => any) | undefined;
        first?: ((props: Record<string, never>) => any) | undefined;
    }> & {
        default?: ((props: Record<string, never>) => any) | undefined;
        first?: ((props: Record<string, never>) => any) | undefined;
    };
    emit: (evt: "update:modelValue", value: unknown) => void;
}>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: {
        props: {
            name?: string | undefined;
            id?: string | undefined;
            ariaInvalid?: AriaInvalid | undefined;
            autofocus?: Booleanish | undefined;
            disabled?: Booleanish | undefined;
            form?: string | undefined;
            multiple?: Booleanish | undefined;
            required?: Booleanish | undefined;
            size?: keyof import("../../types").BaseSize | undefined;
            plain?: Booleanish | undefined;
            state?: Booleanish | null | undefined;
            modelValue?: string | number | boolean | readonly unknown[] | Readonly<Record<string, unknown>> | null | undefined;
            options?: readonly (SelectOptionRaw | Readonly<{
                label: string;
                options: readonly SelectOptionRaw<unknown>[];
            }>)[] | undefined;
            "onUpdate:modelValue"?: ((value: unknown) => any) | undefined;
            selectSize?: Numberish | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
        expose(exposed: import("vue").ShallowUnwrapRef<{
            blur: () => void;
            element: import("vue").Ref<HTMLElement | null>;
            focus: () => void;
        }>): void;
        attrs: any;
        slots: Readonly<{
            default?: ((props: Record<string, never>) => any) | undefined;
            first?: ((props: Record<string, never>) => any) | undefined;
        }> & {
            default?: ((props: Record<string, never>) => any) | undefined;
            first?: ((props: Record<string, never>) => any) | undefined;
        };
        emit: (evt: "update:modelValue", value: unknown) => void;
    } | undefined;
};
export default _default;
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
