import type { BModalProps } from '../../types';
import { BvTriggerableEvent } from '../../utils';
type SharedSlotsData = {
    cancel: () => void;
    close: () => void;
    hide: (trigger?: string) => void;
    ok: () => void;
    visible: boolean;
};
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<BModalProps>, {
    autoFocus: boolean;
    autoFocusButton: undefined;
    backdropVariant: undefined;
    body: undefined;
    bodyBgVariant: null;
    bodyClass: undefined;
    bodyScrolling: boolean;
    bodyTextVariant: null;
    bodyVariant: null;
    busy: boolean;
    buttonSize: string;
    cancelDisabled: boolean;
    cancelTitle: string;
    cancelVariant: string;
    centered: boolean;
    contentClass: undefined;
    dialogClass: undefined;
    footerBgVariant: null;
    footerBorderVariant: null;
    footerClass: undefined;
    footerTextVariant: null;
    footerVariant: null;
    fullscreen: boolean;
    headerBgVariant: null;
    headerBorderVariant: null;
    headerClass: undefined;
    headerCloseClass: undefined;
    headerCloseLabel: string;
    headerCloseVariant: string;
    headerTextVariant: null;
    headerVariant: null;
    hideBackdrop: boolean;
    hideFooter: boolean;
    hideHeader: boolean;
    hideHeaderClose: boolean;
    id: undefined;
    lazy: boolean;
    modalClass: undefined;
    modelValue: boolean;
    noCloseOnBackdrop: boolean;
    noCloseOnEsc: boolean;
    noFade: boolean;
    okDisabled: boolean;
    okOnly: boolean;
    okTitle: string;
    okVariant: string;
    scrollable: boolean;
    size: string;
    teleportDisabled: boolean;
    teleportTo: string;
    title: undefined;
    titleClass: undefined;
    titleSrOnly: boolean;
    titleTag: string;
    transProps: undefined;
}>, {
    hide: (trigger?: string) => void;
    id: import("vue").ComputedRef<string>;
    show: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    hidden: (value: BvTriggerableEvent) => void;
    close: (value: BvTriggerableEvent) => void;
    "update:modelValue": (value: boolean) => void;
    cancel: (value: BvTriggerableEvent) => void;
    show: (value: BvTriggerableEvent) => void;
    hide: (value: BvTriggerableEvent) => void;
    "hide-prevented": () => void;
    "show-prevented": () => void;
    shown: (value: BvTriggerableEvent) => void;
    ok: (value: BvTriggerableEvent) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<BModalProps>, {
    autoFocus: boolean;
    autoFocusButton: undefined;
    backdropVariant: undefined;
    body: undefined;
    bodyBgVariant: null;
    bodyClass: undefined;
    bodyScrolling: boolean;
    bodyTextVariant: null;
    bodyVariant: null;
    busy: boolean;
    buttonSize: string;
    cancelDisabled: boolean;
    cancelTitle: string;
    cancelVariant: string;
    centered: boolean;
    contentClass: undefined;
    dialogClass: undefined;
    footerBgVariant: null;
    footerBorderVariant: null;
    footerClass: undefined;
    footerTextVariant: null;
    footerVariant: null;
    fullscreen: boolean;
    headerBgVariant: null;
    headerBorderVariant: null;
    headerClass: undefined;
    headerCloseClass: undefined;
    headerCloseLabel: string;
    headerCloseVariant: string;
    headerTextVariant: null;
    headerVariant: null;
    hideBackdrop: boolean;
    hideFooter: boolean;
    hideHeader: boolean;
    hideHeaderClose: boolean;
    id: undefined;
    lazy: boolean;
    modalClass: undefined;
    modelValue: boolean;
    noCloseOnBackdrop: boolean;
    noCloseOnEsc: boolean;
    noFade: boolean;
    okDisabled: boolean;
    okOnly: boolean;
    okTitle: string;
    okVariant: string;
    scrollable: boolean;
    size: string;
    teleportDisabled: boolean;
    teleportTo: string;
    title: undefined;
    titleClass: undefined;
    titleSrOnly: boolean;
    titleTag: string;
    transProps: undefined;
}>>> & {
    onHidden?: ((value: BvTriggerableEvent) => any) | undefined;
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    onShow?: ((value: BvTriggerableEvent) => any) | undefined;
    onHide?: ((value: BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: (() => any) | undefined;
    "onShow-prevented"?: (() => any) | undefined;
    onShown?: ((value: BvTriggerableEvent) => any) | undefined;
    onClose?: ((value: BvTriggerableEvent) => any) | undefined;
    onCancel?: ((value: BvTriggerableEvent) => any) | undefined;
    onOk?: ((value: BvTriggerableEvent) => any) | undefined;
}, {
    title: string;
    id: string;
    body: string;
    size: "xl" | keyof import("../../types").BaseSize;
    lazy: import("../../types").Booleanish;
    modelValue: import("../../types").Booleanish;
    noFade: import("../../types").Booleanish;
    bodyClass: any;
    headerClass: any;
    transProps: Readonly<import("../../types").BTransitionProps>;
    autoFocus: import("../../types").Booleanish;
    autoFocusButton: "close" | "cancel" | "ok";
    backdropVariant: keyof import("../../types").BaseColorVariant | null;
    bodyBgVariant: keyof import("../../types").BaseColorVariant | null;
    bodyScrolling: import("../../types").Booleanish;
    bodyTextVariant: keyof import("../../types").BaseTextColorVariant | null;
    bodyVariant: keyof import("../../types").BaseColorVariant | null;
    busy: import("../../types").Booleanish;
    buttonSize: keyof import("../../types").BaseSize;
    cancelDisabled: import("../../types").Booleanish;
    cancelTitle: string;
    cancelVariant: keyof import("../../types").BaseButtonVariant | null;
    centered: import("../../types").Booleanish;
    contentClass: any;
    dialogClass: any;
    footerBgVariant: keyof import("../../types").BaseColorVariant | null;
    footerBorderVariant: keyof import("../../types").BaseColorVariant | null;
    footerClass: any;
    footerTextVariant: keyof import("../../types").BaseTextColorVariant | null;
    footerVariant: keyof import("../../types").BaseColorVariant | null;
    fullscreen: import("../../types").Booleanish | import("../../types").Breakpoint;
    headerBgVariant: keyof import("../../types").BaseColorVariant | null;
    headerBorderVariant: keyof import("../../types").BaseColorVariant | null;
    headerCloseClass: any;
    headerCloseLabel: string;
    headerCloseVariant: keyof import("../../types").BaseButtonVariant | null;
    headerTextVariant: keyof import("../../types").BaseTextColorVariant | null;
    headerVariant: keyof import("../../types").BaseColorVariant | null;
    hideBackdrop: import("../../types").Booleanish;
    hideFooter: import("../../types").Booleanish;
    hideHeader: import("../../types").Booleanish;
    hideHeaderClose: import("../../types").Booleanish;
    modalClass: any;
    noCloseOnBackdrop: import("../../types").Booleanish;
    noCloseOnEsc: import("../../types").Booleanish;
    okDisabled: import("../../types").Booleanish;
    okOnly: import("../../types").Booleanish;
    okTitle: string;
    okVariant: keyof import("../../types").BaseButtonVariant | null;
    scrollable: import("../../types").Booleanish;
    teleportDisabled: import("../../types").Booleanish;
    teleportTo: string | Readonly<import("vue").RendererElement> | null;
    titleClass: any;
    titleSrOnly: import("../../types").Booleanish;
    titleTag: string;
}, {}>, Readonly<{
    backdrop?: ((props: Record<string, never>) => any) | undefined;
    cancel?: ((props: SharedSlotsData) => any) | undefined;
    default?: ((props: SharedSlotsData) => any) | undefined;
    footer?: ((props: SharedSlotsData) => any) | undefined;
    header?: ((props: SharedSlotsData) => any) | undefined;
    'header-close'?: ((props: Record<string, never>) => any) | undefined;
    ok?: ((props: SharedSlotsData) => any) | undefined;
    title?: ((props: SharedSlotsData) => any) | undefined;
}> & {
    backdrop?: ((props: Record<string, never>) => any) | undefined;
    cancel?: ((props: SharedSlotsData) => any) | undefined;
    default?: ((props: SharedSlotsData) => any) | undefined;
    footer?: ((props: SharedSlotsData) => any) | undefined;
    header?: ((props: SharedSlotsData) => any) | undefined;
    'header-close'?: ((props: Record<string, never>) => any) | undefined;
    ok?: ((props: SharedSlotsData) => any) | undefined;
    title?: ((props: SharedSlotsData) => any) | undefined;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
