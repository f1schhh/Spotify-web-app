import { type MaybeRefOrGetter } from 'vue';
import type { SelectOption, SelectOptionRaw } from '../types';
declare const _default: <T extends readonly SelectOptionRaw[] | readonly (SelectOptionRaw | Readonly<{
    label: string;
    options: readonly SelectOptionRaw<unknown>[];
}>)[]>(options: MaybeRefOrGetter<T>) => {
    normalizedOptions: import("vue").ComputedRef<T extends readonly SelectOptionRaw[] ? SelectOption<unknown>[] : (SelectOption<unknown> | Readonly<{
        label: string;
        options: readonly SelectOptionRaw<unknown>[];
    }>)[]>;
    isComplex: (option: unknown) => option is Readonly<{
        label: string;
        options: readonly SelectOptionRaw<unknown>[];
    }>;
};
export default _default;
