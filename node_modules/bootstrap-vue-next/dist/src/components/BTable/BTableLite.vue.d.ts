import type { TableField, TableFieldFormatter, TableFieldRaw, TableItem } from '../../types';
declare const _default: <T = Record<string, unknown>>(__VLS_props: {
    id?: string | undefined;
    caption?: string | undefined;
    small?: import("../../types").Booleanish | undefined;
    align?: import("../../types").VerticalAlign | undefined;
    variant?: keyof import("../../types").BaseColorVariant | null | undefined;
    fixed?: import("../../types").Booleanish | undefined;
    dark?: import("../../types").Booleanish | undefined;
    modelValue?: any;
    items?: readonly TableItem<T>[] | undefined;
    borderVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
    captionHtml?: string | undefined;
    stacked?: import("../../types").Booleanish | import("../../types").Breakpoint | undefined;
    bordered?: import("../../types").Booleanish | undefined;
    borderless?: import("../../types").Booleanish | undefined;
    captionTop?: import("../../types").Booleanish | undefined;
    hover?: import("../../types").Booleanish | undefined;
    noBorderCollapse?: import("../../types").Booleanish | undefined;
    outlined?: import("../../types").Booleanish | undefined;
    responsive?: import("../../types").Booleanish | import("../../types").Breakpoint | undefined;
    stickyHeader?: import("../../types").Booleanish | undefined;
    striped?: import("../../types").Booleanish | undefined;
    stripedColumns?: import("../../types").Booleanish | undefined;
    tableClass?: any;
    "onHead-clicked"?: ((key: import("../../types").LiteralUnion<keyof T>, field: TableFieldRaw<T>, event: MouseEvent, isFooter: boolean) => any) | undefined;
    "onRow-clicked"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
    "onRow-dbl-clicked"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
    "onRow-hovered"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
    "onRow-unhovered"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
    detailsTdClass?: any;
    emptyFilteredText?: string | undefined;
    emptyText?: string | undefined;
    fieldColumnClass?: string | readonly any[] | Readonly<Record<PropertyKey, any>> | ((field: TableField<T>) => readonly Record<string, any>[]) | undefined;
    fields?: TableFieldRaw<T>[] | undefined;
    footClone?: import("../../types").Booleanish | undefined;
    footRowVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
    footVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
    headRowVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
    headVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
    labelStacked?: import("../../types").Booleanish | undefined;
    primaryKey?: string | undefined;
    showEmpty?: import("../../types").Booleanish | undefined;
    tbodyClass?: any;
    tbodyTrAttr?: any;
    tbodyTrClass?: string | readonly any[] | Readonly<Record<PropertyKey, any>> | ((item: TableItem | null, type: string) => string | readonly any[] | null | undefined) | undefined;
    tfootClass?: any;
    tfootTrClass?: any;
    theadClass?: any;
    theadTrClass?: any;
} & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, __VLS_ctx?: {
    slots: Partial<Record<string, (_: {
        label: string | undefined;
        column: import("../../types").LiteralUnion<keyof T>;
        field: TableField<T>;
        isFoot: boolean;
    }) => any>> & Partial<Record<string, (_: {
        value: unknown;
        index: number;
        item: TableItem<T>;
        field: TableField<T>;
        items: readonly TableItem<T>[];
        toggleDetails: () => void;
        detailsShowing: boolean;
    }) => any>> & Partial<Record<string, (_: {
        label: string | undefined;
        column: import("../../types").LiteralUnion<keyof T>;
        field: TableField<T>;
        isFoot: boolean;
    }) => any>> & {
        "thead-top"?(_: {}): any;
        "thead-sub"?(_: {
            key: import("../../types").LiteralUnion<keyof T>;
            label?: string | undefined;
            headerTitle?: string | undefined;
            headerAbbr?: string | undefined;
            class?: any;
            formatter?: TableFieldFormatter<T> | undefined;
            sortable?: boolean | undefined;
            sortKey?: string | undefined;
            sortDirection?: string | undefined;
            sortByFormatted?: boolean | undefined;
            filterByFormatted?: boolean | undefined;
            tdClass?: any;
            thClass?: any;
            thStyle?: import("vue").StyleValue;
            variant?: keyof import("../../types").BaseColorVariant | null | undefined;
            tdAttr?: Record<string, unknown> | undefined;
            thAttr?: Record<string, unknown> | undefined;
            isRowHeader?: boolean | undefined;
            stickyColumn?: boolean | undefined;
            items: TableField<T>[];
        }): any;
        "custom-body"?(_: {
            fields: TableField<T>[];
            items: readonly TableItem<T>[];
            columns: number;
        }): any;
        "top-row"?(_: {}): any;
        "row-details"?(_: {
            item: TableItem<T>;
            toggleDetails: () => void;
            fields: TableFieldRaw<T>[];
            index: number;
        }): any;
        empty?(_: {
            items: readonly TableItem<T>[];
        }): any;
        "bottom-row"?(_: {}): any;
        "custom-foot"?(_: {
            fields: TableField<T>[];
            items: readonly TableItem<T>[];
            columns: number;
        }): any;
        "table-caption"?(_: {}): any;
    };
    attrs: any;
    emit: ((evt: "head-clicked", key: import("../../types").LiteralUnion<keyof T>, field: TableFieldRaw<T>, event: MouseEvent, isFooter: boolean) => void) & ((evt: "row-clicked", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-dbl-clicked", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-hovered", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-unhovered", item: TableItem<T>, index: number, event: MouseEvent) => void);
} | undefined, __VLS_expose?: ((exposed: import('vue').ShallowUnwrapRef<{}>) => void) | undefined, __VLS_setup?: Promise<{
    props: {
        id?: string | undefined;
        caption?: string | undefined;
        small?: import("../../types").Booleanish | undefined;
        align?: import("../../types").VerticalAlign | undefined;
        variant?: keyof import("../../types").BaseColorVariant | null | undefined;
        fixed?: import("../../types").Booleanish | undefined;
        dark?: import("../../types").Booleanish | undefined;
        modelValue?: any;
        items?: readonly TableItem<T>[] | undefined;
        borderVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
        captionHtml?: string | undefined;
        stacked?: import("../../types").Booleanish | import("../../types").Breakpoint | undefined;
        bordered?: import("../../types").Booleanish | undefined;
        borderless?: import("../../types").Booleanish | undefined;
        captionTop?: import("../../types").Booleanish | undefined;
        hover?: import("../../types").Booleanish | undefined;
        noBorderCollapse?: import("../../types").Booleanish | undefined;
        outlined?: import("../../types").Booleanish | undefined;
        responsive?: import("../../types").Booleanish | import("../../types").Breakpoint | undefined;
        stickyHeader?: import("../../types").Booleanish | undefined;
        striped?: import("../../types").Booleanish | undefined;
        stripedColumns?: import("../../types").Booleanish | undefined;
        tableClass?: any;
        "onHead-clicked"?: ((key: import("../../types").LiteralUnion<keyof T>, field: TableFieldRaw<T>, event: MouseEvent, isFooter: boolean) => any) | undefined;
        "onRow-clicked"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
        "onRow-dbl-clicked"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
        "onRow-hovered"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
        "onRow-unhovered"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
        detailsTdClass?: any;
        emptyFilteredText?: string | undefined;
        emptyText?: string | undefined;
        fieldColumnClass?: string | readonly any[] | Readonly<Record<PropertyKey, any>> | ((field: TableField<T>) => readonly Record<string, any>[]) | undefined;
        fields?: TableFieldRaw<T>[] | undefined;
        footClone?: import("../../types").Booleanish | undefined;
        footRowVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
        footVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
        headRowVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
        headVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
        labelStacked?: import("../../types").Booleanish | undefined;
        primaryKey?: string | undefined;
        showEmpty?: import("../../types").Booleanish | undefined;
        tbodyClass?: any;
        tbodyTrAttr?: any;
        tbodyTrClass?: string | readonly any[] | Readonly<Record<PropertyKey, any>> | ((item: TableItem | null, type: string) => string | readonly any[] | null | undefined) | undefined;
        tfootClass?: any;
        tfootTrClass?: any;
        theadClass?: any;
        theadTrClass?: any;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{}>): void;
    attrs: any;
    slots: Partial<Record<string, (_: {
        label: string | undefined;
        column: import("../../types").LiteralUnion<keyof T>;
        field: TableField<T>;
        isFoot: boolean;
    }) => any>> & Partial<Record<string, (_: {
        value: unknown;
        index: number;
        item: TableItem<T>;
        field: TableField<T>;
        items: readonly TableItem<T>[];
        toggleDetails: () => void;
        detailsShowing: boolean;
    }) => any>> & Partial<Record<string, (_: {
        label: string | undefined;
        column: import("../../types").LiteralUnion<keyof T>;
        field: TableField<T>;
        isFoot: boolean;
    }) => any>> & {
        "thead-top"?(_: {}): any;
        "thead-sub"?(_: {
            key: import("../../types").LiteralUnion<keyof T>;
            label?: string | undefined;
            headerTitle?: string | undefined;
            headerAbbr?: string | undefined;
            class?: any;
            formatter?: TableFieldFormatter<T> | undefined;
            sortable?: boolean | undefined;
            sortKey?: string | undefined;
            sortDirection?: string | undefined;
            sortByFormatted?: boolean | undefined;
            filterByFormatted?: boolean | undefined;
            tdClass?: any;
            thClass?: any;
            thStyle?: import("vue").StyleValue;
            variant?: keyof import("../../types").BaseColorVariant | null | undefined;
            tdAttr?: Record<string, unknown> | undefined;
            thAttr?: Record<string, unknown> | undefined;
            isRowHeader?: boolean | undefined;
            stickyColumn?: boolean | undefined;
            items: TableField<T>[];
        }): any;
        "custom-body"?(_: {
            fields: TableField<T>[];
            items: readonly TableItem<T>[];
            columns: number;
        }): any;
        "top-row"?(_: {}): any;
        "row-details"?(_: {
            item: TableItem<T>;
            toggleDetails: () => void;
            fields: TableFieldRaw<T>[];
            index: number;
        }): any;
        empty?(_: {
            items: readonly TableItem<T>[];
        }): any;
        "bottom-row"?(_: {}): any;
        "custom-foot"?(_: {
            fields: TableField<T>[];
            items: readonly TableItem<T>[];
            columns: number;
        }): any;
        "table-caption"?(_: {}): any;
    };
    emit: ((evt: "head-clicked", key: import("../../types").LiteralUnion<keyof T>, field: TableFieldRaw<T>, event: MouseEvent, isFooter: boolean) => void) & ((evt: "row-clicked", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-dbl-clicked", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-hovered", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-unhovered", item: TableItem<T>, index: number, event: MouseEvent) => void);
}>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: {
        props: {
            id?: string | undefined;
            caption?: string | undefined;
            small?: import("../../types").Booleanish | undefined;
            align?: import("../../types").VerticalAlign | undefined;
            variant?: keyof import("../../types").BaseColorVariant | null | undefined;
            fixed?: import("../../types").Booleanish | undefined;
            dark?: import("../../types").Booleanish | undefined;
            modelValue?: any;
            items?: readonly TableItem<T>[] | undefined;
            borderVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
            captionHtml?: string | undefined;
            stacked?: import("../../types").Booleanish | import("../../types").Breakpoint | undefined;
            bordered?: import("../../types").Booleanish | undefined;
            borderless?: import("../../types").Booleanish | undefined;
            captionTop?: import("../../types").Booleanish | undefined;
            hover?: import("../../types").Booleanish | undefined;
            noBorderCollapse?: import("../../types").Booleanish | undefined;
            outlined?: import("../../types").Booleanish | undefined;
            responsive?: import("../../types").Booleanish | import("../../types").Breakpoint | undefined;
            stickyHeader?: import("../../types").Booleanish | undefined;
            striped?: import("../../types").Booleanish | undefined;
            stripedColumns?: import("../../types").Booleanish | undefined;
            tableClass?: any;
            "onHead-clicked"?: ((key: import("../../types").LiteralUnion<keyof T>, field: TableFieldRaw<T>, event: MouseEvent, isFooter: boolean) => any) | undefined;
            "onRow-clicked"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
            "onRow-dbl-clicked"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
            "onRow-hovered"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
            "onRow-unhovered"?: ((item: TableItem<T>, index: number, event: MouseEvent) => any) | undefined;
            detailsTdClass?: any;
            emptyFilteredText?: string | undefined;
            emptyText?: string | undefined;
            fieldColumnClass?: string | readonly any[] | Readonly<Record<PropertyKey, any>> | ((field: TableField<T>) => readonly Record<string, any>[]) | undefined;
            fields?: TableFieldRaw<T>[] | undefined;
            footClone?: import("../../types").Booleanish | undefined;
            footRowVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
            footVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
            headRowVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
            headVariant?: keyof import("../../types").BaseColorVariant | null | undefined;
            labelStacked?: import("../../types").Booleanish | undefined;
            primaryKey?: string | undefined;
            showEmpty?: import("../../types").Booleanish | undefined;
            tbodyClass?: any;
            tbodyTrAttr?: any;
            tbodyTrClass?: string | readonly any[] | Readonly<Record<PropertyKey, any>> | ((item: TableItem | null, type: string) => string | readonly any[] | null | undefined) | undefined;
            tfootClass?: any;
            tfootTrClass?: any;
            theadClass?: any;
            theadTrClass?: any;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
        expose(exposed: import('vue').ShallowUnwrapRef<{}>): void;
        attrs: any;
        slots: Partial<Record<string, (_: {
            label: string | undefined;
            column: import("../../types").LiteralUnion<keyof T>;
            field: TableField<T>;
            isFoot: boolean;
        }) => any>> & Partial<Record<string, (_: {
            value: unknown;
            index: number;
            item: TableItem<T>;
            field: TableField<T>;
            items: readonly TableItem<T>[];
            toggleDetails: () => void;
            detailsShowing: boolean;
        }) => any>> & Partial<Record<string, (_: {
            label: string | undefined;
            column: import("../../types").LiteralUnion<keyof T>;
            field: TableField<T>;
            isFoot: boolean;
        }) => any>> & {
            "thead-top"?(_: {}): any;
            "thead-sub"?(_: {
                key: import("../../types").LiteralUnion<keyof T>;
                label?: string | undefined;
                headerTitle?: string | undefined;
                headerAbbr?: string | undefined;
                class?: any;
                formatter?: TableFieldFormatter<T> | undefined;
                sortable?: boolean | undefined;
                sortKey?: string | undefined;
                sortDirection?: string | undefined;
                sortByFormatted?: boolean | undefined;
                filterByFormatted?: boolean | undefined;
                tdClass?: any;
                thClass?: any;
                thStyle?: import("vue").StyleValue;
                variant?: keyof import("../../types").BaseColorVariant | null | undefined;
                tdAttr?: Record<string, unknown> | undefined;
                thAttr?: Record<string, unknown> | undefined;
                isRowHeader?: boolean | undefined;
                stickyColumn?: boolean | undefined;
                items: TableField<T>[];
            }): any;
            "custom-body"?(_: {
                fields: TableField<T>[];
                items: readonly TableItem<T>[];
                columns: number;
            }): any;
            "top-row"?(_: {}): any;
            "row-details"?(_: {
                item: TableItem<T>;
                toggleDetails: () => void;
                fields: TableFieldRaw<T>[];
                index: number;
            }): any;
            empty?(_: {
                items: readonly TableItem<T>[];
            }): any;
            "bottom-row"?(_: {}): any;
            "custom-foot"?(_: {
                fields: TableField<T>[];
                items: readonly TableItem<T>[];
                columns: number;
            }): any;
            "table-caption"?(_: {}): any;
        };
        emit: ((evt: "head-clicked", key: import("../../types").LiteralUnion<keyof T>, field: TableFieldRaw<T>, event: MouseEvent, isFooter: boolean) => void) & ((evt: "row-clicked", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-dbl-clicked", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-hovered", item: TableItem<T>, index: number, event: MouseEvent) => void) & ((evt: "row-unhovered", item: TableItem<T>, index: number, event: MouseEvent) => void);
    } | undefined;
};
export default _default;
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
